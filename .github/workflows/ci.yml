name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore backend/CopilotEvalApi.csproj
    
    - name: Build backend
      run: dotnet build backend/CopilotEvalApi.csproj --no-restore
    
    - name: Run backend unit tests
      run: dotnet test tests/backend/CopilotEvalApi.Tests/CopilotEvalApi.Tests.csproj --no-build --verbosity normal --logger trx --results-directory TestResults
    
    - name: Upload backend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: TestResults/*.trx

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend
    
    - name: Lint frontend
      run: npm run lint
      working-directory: frontend
    
    - name: Build frontend
      run: npm run build
      working-directory: frontend
    
    - name: Run frontend unit tests
      run: npm test -- --run --reporter=junit --outputFile=../TestResults/frontend-results.xml
      working-directory: frontend
    
    - name: Upload frontend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: TestResults/frontend-results.xml

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend
    
    - name: Build frontend
      run: npm run build
      working-directory: frontend
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      working-directory: tests/e2e
    
    - name: Install E2E test dependencies
      run: npm ci
      working-directory: tests/e2e
    
    - name: Run Playwright tests
      run: npx playwright test
      working-directory: tests/e2e
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: tests/e2e/playwright-report/
        retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Build backend
      run: dotnet build backend/CopilotEvalApi.csproj
    
    - name: Start backend server
      run: |
        cd backend
        dotnet run --urls "http://localhost:5000" &
        sleep 10
      env:
        ASPNETCORE_ENVIRONMENT: Development
    
    - name: Run API integration tests
      run: |
        cd backend/scripts
        chmod +x jobs-api-integration-tests.sh
        ./jobs-api-integration-tests.sh
    
    - name: Run contract tests
      run: |
        cd backend/scripts
        chmod +x contract-tests.sh
        ./contract-tests.sh

  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Build and start backend
      run: |
        cd backend
        dotnet build
        dotnet run --urls "http://localhost:5000" &
        sleep 15
      env:
        ASPNETCORE_ENVIRONMENT: Development
    
    - name: Run basic load test
      run: |
        cd load-tests/k6
        k6 run --out json=load-test-results.json job-api-load-test.js
    
    - name: Upload load test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: load-test-results
        path: load-tests/k6/load-test-results.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, integration-tests]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        echo "Backend Tests: ${{ needs.backend-tests.result }}"
        echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
        echo "E2E Tests: ${{ needs.e2e-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        
        if [[ "${{ needs.backend-tests.result }}" == "failure" || "${{ needs.frontend-tests.result }}" == "failure" || "${{ needs.e2e-tests.result }}" == "failure" || "${{ needs.integration-tests.result }}" == "failure" ]]; then
          echo "❌ One or more test suites failed"
          exit 1
        else
          echo "✅ All test suites passed"
        fi